import { TemplateModel } from '@kubevirt-ui/kubevirt-api/console';
export var defaultVMTemplateYamlTemplate = "\napiVersion: ".concat(TemplateModel.apiGroup, "/").concat(TemplateModel.apiVersion, "\nkind: ").concat(TemplateModel.kind, "\nmetadata:\n  name: example\n  labels:\n    template.kubevirt.io/type: vm\n    os.template.kubevirt.io/fedora: 'true'\n    workload.template.kubevirt.io/server: 'true'\n  annotations:\n    name.os.template.kubevirt.io/fedora: Fedora \n    description: VM template example\n    openshift.io/display-name: \"Fedora VM\"\n    iconClass: icon-fedora\nobjects:\n  - apiVersion: kubevirt.io/v1\n    kind: VirtualMachine\n    metadata:\n      name: '${NAME}'\n      annotations:\n        description: VM example\n      labels:\n        app: '${NAME}'\n        vm.kubevirt.io/template: example\n        os.template.kubevirt.io/fedora: 'true'\n    spec:\n      runStrategy: Halted\n      template:\n        metadata:\n          annotations:\n            vm.kubevirt.io/flavor: small\n            vm.kubevirt.io/os: fedora\n            vm.kubevirt.io/workload: server\n          labels:\n            kubevirt.io/domain: '${NAME}'\n            kubevirt.io/size: small\n        spec:\n          domain:\n            cpu:\n              cores: 1\n              sockets: 1\n              threads: 1\n            devices:\n              disks:\n                - disk:\n                    bus: virtio\n                  name: rootdisk\n                - disk:\n                    bus: virtio\n                  name: cloudinitdisk\n              interfaces:\n                - masquerade: {}\n                  model: virtio\n                  name: default\n              networkInterfaceMultiqueue: true\n              rng: {}\n            features:\n              acpi: {}\n              smm:\n                enabled: true\n            firmware:\n              bootloader:\n                efi: {}\n            machine:\n              type: q35\n            memory:\n              guest: 2Gi\n          hostname: '${NAME}'\n          networks:\n            - name: default\n              pod: {}\n          terminationGracePeriodSeconds: 180\n          volumes:\n            - name: rootdisk\n              containerDisk:\n                image: 'quay.io/containerdisks/fedora'\n            - cloudInitNoCloud:\n                userData: |-\n                  #cloud-config\n                  user: fedora\n                  password: '${CLOUD_USER_PASSWORD}'\n                  chpasswd: { expire: False }\n              name: cloudinitdisk\nparameters:\n  - name: NAME\n    description: Name for the new VM\n    generate: expression\n    from: 'example-[a-z0-9]{16}'\n  - name: CLOUD_USER_PASSWORD\n    description: Randomized password for the cloud-init user\n    generate: expression\n    from: '[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{4}'\n");
//# sourceMappingURL=vm-template-yaml.js.map