import React from 'react';
import { JobModel, modelToGroupVersionKind, NamespaceModel, StorageClassModel, } from '@kubevirt-ui/kubevirt-api/console';
import VirtualMachineDescriptionItem from '@kubevirt-utils/components/VirtualMachineDescriptionItem/VirtualMachineDescriptionItem';
import { useKubevirtTranslation } from '@kubevirt-utils/hooks/useKubevirtTranslation';
import { NO_DATA_DASH } from '@kubevirt-utils/resources/vm/utils/constants';
import { ResourceLink, Timestamp } from '@openshift-console/dynamic-plugin-sdk';
import { DescriptionList, Grid, GridItem, Title } from '@patternfly/react-core';
import CheckupsNetworkStatusIcon from '../../CheckupsNetworkStatusIcon';
import { STATUS_COMPILATION_TIME_STAMP, STATUS_FAILURE_REASON, STATUS_START_TIME_STAMP, } from '../../utils/utils';
import { STORAGE_CHECKUP_DEFAULT_STORAGE_CLASS, STORAGE_CHECKUP_LIVE_MIGRATION, STORAGE_CHECKUP_TIMEOUT, STORAGE_CHECKUPS_BOOT_GOLDEN_IMAGE, STORAGE_CHECKUPS_GOLDEN_IMAGE_NO_DATA_SOURCE, STORAGE_CHECKUPS_GOLDEN_IMAGE_NOT_UP_TO_DATE, STORAGE_CHECKUPS_MISSING_VOLUME_SNAP_SHOT, STORAGE_CHECKUPS_PVC_BOUND, STORAGE_CHECKUPS_STORAGE_WITH_RWX, STORAGE_CHECKUPS_UNSET_EFS_STORAGE_CLASS, STORAGE_CHECKUPS_VM_HOT_PLUG_VOLUME, STORAGE_CHECKUPS_VM_VOLUME_CLONE, STORAGE_CHECKUPS_WITH_CLAIM_PROPERTY_SETS, STORAGE_CHECKUPS_WITH_EMPTY_CLAIM_PROPERTY_SETS, STORAGE_CHECKUPS_WITH_NON_RBD_STORAGE_CLASS, STORAGE_CHECKUPS_WITH_SMART_CLONE, } from '../utils/utils';
var CheckupsStorageDetailsPageSection = function (_a) {
    var _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q, _r, _s, _t, _u, _v, _w, _x, _y, _z, _0;
    var configMap = _a.configMap, job = _a.job;
    var t = useKubevirtTranslation().t;
    var none = t('None');
    return (React.createElement(React.Fragment, null,
        React.createElement(Title, { className: "co-section-heading", headingLevel: "h2" }, t('Storage checkup details')),
        React.createElement(Grid, null,
            React.createElement(GridItem, { span: 6 },
                React.createElement(DescriptionList, { className: "pf-c-description-list" },
                    React.createElement(VirtualMachineDescriptionItem, { descriptionData: (_b = configMap === null || configMap === void 0 ? void 0 : configMap.metadata) === null || _b === void 0 ? void 0 : _b.name, descriptionHeader: t('Name') }),
                    React.createElement(VirtualMachineDescriptionItem, { descriptionData: React.createElement(CheckupsNetworkStatusIcon, { configMap: configMap, job: job }), descriptionHeader: t('Status') }),
                    React.createElement(VirtualMachineDescriptionItem, { descriptionData: React.createElement(Timestamp, { timestamp: ((_c = configMap === null || configMap === void 0 ? void 0 : configMap.data) === null || _c === void 0 ? void 0 : _c[STATUS_START_TIME_STAMP]) || NO_DATA_DASH }), descriptionHeader: t('Start time') }),
                    React.createElement(VirtualMachineDescriptionItem, { descriptionData: ((_d = configMap === null || configMap === void 0 ? void 0 : configMap.data) === null || _d === void 0 ? void 0 : _d[STORAGE_CHECKUP_DEFAULT_STORAGE_CLASS]) ? (React.createElement(ResourceLink, { groupVersionKind: modelToGroupVersionKind(StorageClassModel), name: (_e = configMap === null || configMap === void 0 ? void 0 : configMap.data) === null || _e === void 0 ? void 0 : _e[STORAGE_CHECKUP_DEFAULT_STORAGE_CLASS] })) : (none), descriptionHeader: t('Default storage class') }),
                    React.createElement(VirtualMachineDescriptionItem, { descriptionData: ((_f = configMap === null || configMap === void 0 ? void 0 : configMap.data) === null || _f === void 0 ? void 0 : _f[STORAGE_CHECKUPS_PVC_BOUND]) || none, descriptionHeader: t('PVC bound') }),
                    React.createElement(VirtualMachineDescriptionItem, { descriptionData: ((_g = configMap === null || configMap === void 0 ? void 0 : configMap.data) === null || _g === void 0 ? void 0 : _g[STORAGE_CHECKUPS_WITH_SMART_CLONE]) || none, descriptionHeader: t('StorageProfiles with smart clone support (CSI/snapshot)') }),
                    React.createElement(VirtualMachineDescriptionItem, { descriptionData: ((_h = configMap === null || configMap === void 0 ? void 0 : configMap.data) === null || _h === void 0 ? void 0 : _h[STORAGE_CHECKUPS_WITH_CLAIM_PROPERTY_SETS]) || none, descriptionHeader: t('StorageProfiles with spec claimPropertySets') }),
                    React.createElement(VirtualMachineDescriptionItem, { descriptionData: ((_j = configMap === null || configMap === void 0 ? void 0 : configMap.data) === null || _j === void 0 ? void 0 : _j[STORAGE_CHECKUPS_MISSING_VOLUME_SNAP_SHOT]) || none, descriptionHeader: t('Storage missing VolumeSnapshotClass') }),
                    React.createElement(VirtualMachineDescriptionItem, { descriptionData: ((_k = configMap === null || configMap === void 0 ? void 0 : configMap.data) === null || _k === void 0 ? void 0 : _k[STORAGE_CHECKUPS_WITH_NON_RBD_STORAGE_CLASS]) || none, descriptionHeader: t('VirtualMachine with non-virt RBD StorageClass') }),
                    React.createElement(VirtualMachineDescriptionItem, { descriptionData: ((_l = configMap === null || configMap === void 0 ? void 0 : configMap.data) === null || _l === void 0 ? void 0 : _l[STORAGE_CHECKUPS_BOOT_GOLDEN_IMAGE]) || none, descriptionHeader: t('VirtualMachine boot from golden image') }),
                    React.createElement(VirtualMachineDescriptionItem, { descriptionData: ((_m = configMap === null || configMap === void 0 ? void 0 : configMap.data) === null || _m === void 0 ? void 0 : _m[STORAGE_CHECKUP_LIVE_MIGRATION]) || none, descriptionHeader: t('VirtualMachine live migration') }),
                    React.createElement(VirtualMachineDescriptionItem, { descriptionData: (_o = configMap === null || configMap === void 0 ? void 0 : configMap.data) === null || _o === void 0 ? void 0 : _o[STORAGE_CHECKUP_TIMEOUT], descriptionHeader: t('Timeout') }))),
            React.createElement(GridItem, { span: 6 },
                React.createElement(DescriptionList, { className: "pf-c-description-list" },
                    React.createElement(VirtualMachineDescriptionItem, { descriptionData: React.createElement(ResourceLink, { groupVersionKind: modelToGroupVersionKind(NamespaceModel), name: (_p = configMap === null || configMap === void 0 ? void 0 : configMap.metadata) === null || _p === void 0 ? void 0 : _p.namespace }), descriptionHeader: t('Namespace') }),
                    React.createElement(VirtualMachineDescriptionItem, { descriptionData: ((_q = configMap === null || configMap === void 0 ? void 0 : configMap.data) === null || _q === void 0 ? void 0 : _q[STATUS_FAILURE_REASON]) || none, descriptionHeader: t('Failure reason') }),
                    React.createElement(VirtualMachineDescriptionItem, { descriptionData: React.createElement(Timestamp, { timestamp: ((_r = configMap === null || configMap === void 0 ? void 0 : configMap.data) === null || _r === void 0 ? void 0 : _r[STATUS_COMPILATION_TIME_STAMP]) || NO_DATA_DASH }), descriptionHeader: t('Complete time') }),
                    React.createElement(VirtualMachineDescriptionItem, { descriptionData: ((_s = configMap === null || configMap === void 0 ? void 0 : configMap.data) === null || _s === void 0 ? void 0 : _s[STORAGE_CHECKUPS_WITH_EMPTY_CLAIM_PROPERTY_SETS]) || none, descriptionHeader: t('Storage class with empty claimPropertySets') }),
                    React.createElement(VirtualMachineDescriptionItem, { descriptionData: ((_t = configMap === null || configMap === void 0 ? void 0 : configMap.data) === null || _t === void 0 ? void 0 : _t[STORAGE_CHECKUPS_STORAGE_WITH_RWX]) || none, descriptionHeader: t('Storage with ReadWriteMany') }),
                    React.createElement(VirtualMachineDescriptionItem, { descriptionData: ((_u = configMap === null || configMap === void 0 ? void 0 : configMap.data) === null || _u === void 0 ? void 0 : _u[STORAGE_CHECKUPS_GOLDEN_IMAGE_NOT_UP_TO_DATE]) || none, descriptionHeader: t('Golden image not up to date') }),
                    React.createElement(VirtualMachineDescriptionItem, { descriptionData: ((_v = configMap === null || configMap === void 0 ? void 0 : configMap.data) === null || _v === void 0 ? void 0 : _v[STORAGE_CHECKUPS_GOLDEN_IMAGE_NO_DATA_SOURCE]) || none, descriptionHeader: t('Golden image no DataSource') }),
                    React.createElement(VirtualMachineDescriptionItem, { descriptionData: ((_w = configMap === null || configMap === void 0 ? void 0 : configMap.data) === null || _w === void 0 ? void 0 : _w[STORAGE_CHECKUPS_UNSET_EFS_STORAGE_CLASS]) || none, descriptionHeader: t('VirtualMachine with unset EFS StorageClass') }),
                    React.createElement(VirtualMachineDescriptionItem, { descriptionData: ((_x = configMap === null || configMap === void 0 ? void 0 : configMap.data) === null || _x === void 0 ? void 0 : _x[STORAGE_CHECKUPS_VM_VOLUME_CLONE]) || none, descriptionHeader: t('VirtualMachine volume clone') }),
                    React.createElement(VirtualMachineDescriptionItem, { descriptionData: ((_y = configMap === null || configMap === void 0 ? void 0 : configMap.data) === null || _y === void 0 ? void 0 : _y[STORAGE_CHECKUPS_VM_HOT_PLUG_VOLUME]) || none, descriptionHeader: t('VirtualMachine hotplug volume') }),
                    React.createElement(VirtualMachineDescriptionItem, { descriptionData: React.createElement(ResourceLink, { groupVersionKind: modelToGroupVersionKind(JobModel), name: (_z = job === null || job === void 0 ? void 0 : job.metadata) === null || _z === void 0 ? void 0 : _z.name, namespace: (_0 = job === null || job === void 0 ? void 0 : job.metadata) === null || _0 === void 0 ? void 0 : _0.namespace }), descriptionHeader: t('Job') }))))));
};
export default CheckupsStorageDetailsPageSection;
//# sourceMappingURL=CheckupsStorageDetailsPageSection.js.map